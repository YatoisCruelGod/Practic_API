// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Practic_API.Models;

#nullable disable

namespace Practic_API.Migrations
{
    [DbContext(typeof(PracticContext))]
    [Migration("20241220063403_MigratonName")]
    partial class MigratonName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PostTag", b =>
                {
                    b.Property<int>("Postid")
                        .HasColumnType("int")
                        .HasColumnName("postid");

                    b.Property<int>("Tagid")
                        .HasColumnType("int")
                        .HasColumnName("tagid");

                    b.HasKey("Postid", "Tagid")
                        .HasName("PK__post_tag__380ECF8EF29B6C23");

                    b.HasIndex(new[] { "Tagid" }, "IX_post_tags_tagid");

                    b.ToTable("post_tags", (string)null);
                });

            modelBuilder.Entity("Practic_API.Models.Comment", b =>
                {
                    b.Property<int>("Commentid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("commentid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Commentid"));

                    b.Property<DateTime?>("CommentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("comment_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("Observerprofileid")
                        .HasColumnType("int")
                        .HasColumnName("observerprofileid");

                    b.Property<int>("Postid")
                        .HasColumnType("int")
                        .HasColumnName("postid");

                    b.Property<string>("Textcomment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("textcomment");

                    b.HasKey("Commentid")
                        .HasName("PK__comments__CDA84BC583B389CB");

                    b.HasIndex(new[] { "Observerprofileid" }, "IX_comments_observerprofileid");

                    b.HasIndex(new[] { "Postid" }, "IX_comments_postid");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("Practic_API.Models.Favorite", b =>
                {
                    b.Property<int>("Favoriteid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("favoriteid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Favoriteid"));

                    b.Property<DateTime?>("FavoriteDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("favorite_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("Postid")
                        .HasColumnType("int")
                        .HasColumnName("postid");

                    b.Property<int>("Profileid")
                        .HasColumnType("int")
                        .HasColumnName("profileid");

                    b.HasKey("Favoriteid")
                        .HasName("PK__favorite__87770BCD8DBF66F3");

                    b.HasIndex(new[] { "Postid" }, "IX_favorites_postid");

                    b.HasIndex(new[] { "Profileid" }, "IX_favorites_profileid");

                    b.ToTable("favorites", (string)null);
                });

            modelBuilder.Entity("Practic_API.Models.Follower", b =>
                {
                    b.Property<int>("Followerid")
                        .HasColumnType("int")
                        .HasColumnName("followerid");

                    b.Property<int>("Followedid")
                        .HasColumnType("int")
                        .HasColumnName("followedid");

                    b.Property<DateTime?>("FollowDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("follow_date")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Followerid", "Followedid")
                        .HasName("PK__follower__0C86679D45438D8A");

                    b.HasIndex(new[] { "Followedid" }, "IX_followers_followedid");

                    b.ToTable("followers", (string)null);
                });

            modelBuilder.Entity("Practic_API.Models.HealthTip", b =>
                {
                    b.Property<int>("Tipid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tipid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tipid"));

                    b.Property<int>("Creatorprofileid")
                        .HasColumnType("int")
                        .HasColumnName("creatorprofileid");

                    b.Property<DateTime?>("TipDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("tip_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("TipText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tip_text");

                    b.Property<string>("TipTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("tip_title");

                    b.HasKey("Tipid")
                        .HasName("PK__health_t__E42200938FA2F0F3");

                    b.HasIndex(new[] { "Creatorprofileid" }, "IX_health_tips_creatorprofileid");

                    b.ToTable("health_tips", (string)null);
                });

            modelBuilder.Entity("Practic_API.Models.Like", b =>
                {
                    b.Property<int>("Likeid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("likeid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Likeid"));

                    b.Property<DateTime?>("LikeDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("like_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("Postid")
                        .HasColumnType("int")
                        .HasColumnName("postid");

                    b.Property<int>("Profileid")
                        .HasColumnType("int")
                        .HasColumnName("profileid");

                    b.HasKey("Likeid")
                        .HasName("PK__likes__4FC48EC36E05128F");

                    b.HasIndex(new[] { "Postid" }, "IX_likes_postid");

                    b.HasIndex(new[] { "Profileid" }, "IX_likes_profileid");

                    b.ToTable("likes", (string)null);
                });

            modelBuilder.Entity("Practic_API.Models.Post", b =>
                {
                    b.Property<int>("Postid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("postid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Postid"));

                    b.Property<int>("Categoryid")
                        .HasColumnType("int")
                        .HasColumnName("categoryid");

                    b.Property<int>("Creatorprofileid")
                        .HasColumnType("int")
                        .HasColumnName("creatorprofileid");

                    b.Property<DateTime?>("PostDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("post_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PostText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("post_text");

                    b.Property<string>("PostTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("post_title");

                    b.HasKey("Postid")
                        .HasName("PK__post__DD017FD2C8B11C69");

                    b.HasIndex(new[] { "Categoryid" }, "IX_post_categoryid");

                    b.HasIndex(new[] { "Creatorprofileid" }, "IX_post_creatorprofileid");

                    b.ToTable("post", (string)null);
                });

            modelBuilder.Entity("Practic_API.Models.Postcategory", b =>
                {
                    b.Property<int>("Categoryid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("categoryid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Categoryid"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("category_name");

                    b.HasKey("Categoryid")
                        .HasName("PK__postcate__23CDE590C90D33A9");

                    b.ToTable("postcategory", (string)null);
                });

            modelBuilder.Entity("Practic_API.Models.Profile", b =>
                {
                    b.Property<int>("Profileid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("profileid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Profileid"));

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("last_name");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("login");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.HasKey("Profileid")
                        .HasName("PK__profile__7D466051178114DE");

                    b.ToTable("profile", (string)null);
                });

            modelBuilder.Entity("Practic_API.Models.Recipeingredient", b =>
                {
                    b.Property<int>("Recipeid")
                        .HasColumnType("int")
                        .HasColumnName("recipeid");

                    b.Property<string>("IngredientName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ingredient_name");

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("amount");

                    b.HasKey("Recipeid", "IngredientName")
                        .HasName("PK__recipein__D8CE957E87E10019");

                    b.ToTable("recipeingredients", (string)null);
                });

            modelBuilder.Entity("Practic_API.Models.Tag", b =>
                {
                    b.Property<int>("Tagid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tagid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tagid"));

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("tag_name");

                    b.HasKey("Tagid")
                        .HasName("PK__tags__50FB05CFB6071D58");

                    b.HasIndex(new[] { "TagName" }, "UQ__tags__E298655CA58721E7")
                        .IsUnique();

                    b.ToTable("tags", (string)null);
                });

            modelBuilder.Entity("PostTag", b =>
                {
                    b.HasOne("Practic_API.Models.Post", null)
                        .WithMany()
                        .HasForeignKey("Postid")
                        .IsRequired()
                        .HasConstraintName("FK__post_tags__posti__59063A47");

                    b.HasOne("Practic_API.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("Tagid")
                        .IsRequired()
                        .HasConstraintName("FK__post_tags__tagid__59FA5E80");
                });

            modelBuilder.Entity("Practic_API.Models.Comment", b =>
                {
                    b.HasOne("Practic_API.Models.Profile", "Observerprofile")
                        .WithMany("Comments")
                        .HasForeignKey("Observerprofileid")
                        .IsRequired()
                        .HasConstraintName("FK__comments__observ__4222D4EF");

                    b.HasOne("Practic_API.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("Postid")
                        .IsRequired()
                        .HasConstraintName("FK__comments__postid__412EB0B6");

                    b.Navigation("Observerprofile");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Practic_API.Models.Favorite", b =>
                {
                    b.HasOne("Practic_API.Models.Post", "Post")
                        .WithMany("Favorites")
                        .HasForeignKey("Postid")
                        .IsRequired()
                        .HasConstraintName("FK__favorites__posti__4F7CD00D");

                    b.HasOne("Practic_API.Models.Profile", "Profile")
                        .WithMany("Favorites")
                        .HasForeignKey("Profileid")
                        .IsRequired()
                        .HasConstraintName("FK__favorites__profi__5070F446");

                    b.Navigation("Post");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Practic_API.Models.Follower", b =>
                {
                    b.HasOne("Practic_API.Models.Profile", "Followed")
                        .WithMany("FollowerFolloweds")
                        .HasForeignKey("Followedid")
                        .IsRequired()
                        .HasConstraintName("FK__followers__follo__4BAC3F29");

                    b.HasOne("Practic_API.Models.Profile", "FollowerNavigation")
                        .WithMany("FollowerFollowerNavigations")
                        .HasForeignKey("Followerid")
                        .IsRequired()
                        .HasConstraintName("FK__followers__follo__4AB81AF0");

                    b.Navigation("Followed");

                    b.Navigation("FollowerNavigation");
                });

            modelBuilder.Entity("Practic_API.Models.HealthTip", b =>
                {
                    b.HasOne("Practic_API.Models.Profile", "Creatorprofile")
                        .WithMany("HealthTips")
                        .HasForeignKey("Creatorprofileid")
                        .IsRequired()
                        .HasConstraintName("FK__health_ti__creat__5DCAEF64");

                    b.Navigation("Creatorprofile");
                });

            modelBuilder.Entity("Practic_API.Models.Like", b =>
                {
                    b.HasOne("Practic_API.Models.Post", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("Postid")
                        .IsRequired()
                        .HasConstraintName("FK__likes__postid__45F365D3");

                    b.HasOne("Practic_API.Models.Profile", "Profile")
                        .WithMany("Likes")
                        .HasForeignKey("Profileid")
                        .IsRequired()
                        .HasConstraintName("FK__likes__profileid__46E78A0C");

                    b.Navigation("Post");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Practic_API.Models.Post", b =>
                {
                    b.HasOne("Practic_API.Models.Postcategory", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("Categoryid")
                        .IsRequired()
                        .HasConstraintName("FK__post__categoryid__3D5E1FD2");

                    b.HasOne("Practic_API.Models.Profile", "Creatorprofile")
                        .WithMany("Posts")
                        .HasForeignKey("Creatorprofileid")
                        .IsRequired()
                        .HasConstraintName("FK__post__creatorpro__3C69FB99");

                    b.Navigation("Category");

                    b.Navigation("Creatorprofile");
                });

            modelBuilder.Entity("Practic_API.Models.Recipeingredient", b =>
                {
                    b.HasOne("Practic_API.Models.Post", "Recipe")
                        .WithMany("Recipeingredients")
                        .HasForeignKey("Recipeid")
                        .IsRequired()
                        .HasConstraintName("FK__recipeing__recip__534D60F1");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Practic_API.Models.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Favorites");

                    b.Navigation("Likes");

                    b.Navigation("Recipeingredients");
                });

            modelBuilder.Entity("Practic_API.Models.Postcategory", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Practic_API.Models.Profile", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Favorites");

                    b.Navigation("FollowerFolloweds");

                    b.Navigation("FollowerFollowerNavigations");

                    b.Navigation("HealthTips");

                    b.Navigation("Likes");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
